// PROSECU - Schema de Base de Datos con Prisma
// Migración completa a Node.js + PostgreSQL + Vercel/Railway

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuarios
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String
  password  String
  role      UserRole @default(CREW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  MANAGER
  SUPERVISOR
  CREW
}

// Modelo de Personal
model Personnel {
  id         Int      @id @default(autoincrement())
  employeeId String   @unique
  fullName   String
  firstName  String?
  lastName   String?
  position   String
  department String?
  email      String?
  phone      String?
  address    String?
  city       String?
  state      String?
  zipCode    String?
  hireDate   DateTime?
  birthDate  DateTime?
  status     PersonnelStatus @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  projects      ProjectAssignment[]
  documents     Document[]
  training      Training[]
  safetyEquip   SafetyEquipment[]
  crewMembers   CrewMember[]
  workOrders    WorkOrder[]
  procedures    TransformerProcedure[]

  @@map("personnel")
}

enum PersonnelStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

// Modelo de Documentos
model Document {
  id             Int            @id @default(autoincrement())
  personnelId    Int
  documentType   DocumentType
  documentNumber String?
  issueDate      DateTime?
  expirationDate DateTime?
  fileName       String?
  filePath       String?
  fileSize       Int?
  status         DocumentStatus @default(ACTIVE)
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relaciones
  personnel Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentType {
  PASSPORT
  VISA
  CERTIFICATION
  MEDICAL
  INSURANCE
  SAFETY
  LICENSE
  OTHER
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  PENDING_RENEWAL
  CANCELLED
}

// Modelo de Proyectos
model Project {
  id                Int         @id @default(autoincrement())
  projectName       String
  projectCode       String      @unique
  clientName        String?
  location          String?
  state             String?
  description       String?
  startDate         DateTime?
  endDate           DateTime?
  estimatedDuration Int?        // días
  status            ProjectStatus @default(PLANNING)
  priority          ProjectPriority @default(MEDIUM)
  budget            BigInt?     // en centavos
  requiredPersonnel Int?
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relaciones
  assignments ProjectAssignment[]
  workOrders  WorkOrder[]

  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Modelo de Asignaciones de Proyecto
model ProjectAssignment {
  id          Int      @id @default(autoincrement())
  projectId   Int
  personnelId Int
  role        String
  assignedDate DateTime @default(now())
  status      AssignmentStatus @default(ASSIGNED)
  notes       String?

  // Relaciones
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  personnel Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  @@unique([projectId, personnelId])
  @@map("project_assignments")
}

enum AssignmentStatus {
  ASSIGNED
  ON_SITE
  COMPLETED
  CANCELLED
}

// Modelo de Cuadrillas
model Crew {
  id          Int       @id @default(autoincrement())
  crewName    String
  crewCode    String    @unique
  supervisorName String?
  location    String?
  status      CrewStatus @default(AVAILABLE)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  members    CrewMember[]
  workOrders WorkOrder[]
  routes     Route[]

  @@map("crews")
}

enum CrewStatus {
  AVAILABLE
  ASSIGNED
  ON_SITE
  MAINTENANCE
  INACTIVE
}

// Modelo de Miembros de Cuadrilla
model CrewMember {
  id          Int      @id @default(autoincrement())
  crewId      Int
  personnelId Int
  role        String   @default("member")
  joinDate    DateTime @default(now())
  status      MemberStatus @default(ACTIVE)

  // Relaciones
  crew      Crew      @relation(fields: [crewId], references: [id], onDelete: Cascade)
  personnel Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  @@unique([crewId, personnelId])
  @@map("crew_members")
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  TEMPORARY
}

// Modelo de Órdenes de Trabajo
model WorkOrder {
  id            Int           @id @default(autoincrement())
  orderNumber   String        @unique
  title         String
  description   String?
  priority      WorkPriority  @default(MEDIUM)
  status        WorkStatus    @default(PENDING)
  location      String?
  address       String?
  coordinates   String?       // "lat,lng"
  clientName    String?
  contactInfo   String?
  estimatedHours Float?
  actualHours   Float?
  crewId        Int?
  assignedTo    Int?          // personnelId
  projectId     Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  scheduledDate DateTime?
  completedDate DateTime?

  // Relaciones
  crew         Crew?                   @relation(fields: [crewId], references: [id])
  assignedUser Personnel?              @relation(fields: [assignedTo], references: [id])
  project      Project?                @relation(fields: [projectId], references: [id])
  photos       WorkOrderPhoto[]
  steps        WorkOrderStep[]
  transformers WorkOrderTransformer[]

  @@map("work_orders")
}

enum WorkPriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum WorkStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Modelo de Fotos de Órdenes de Trabajo
model WorkOrderPhoto {
  id          Int      @id @default(autoincrement())
  workOrderId Int
  fileName    String
  filePath    String
  fileSize    Int?
  description String?
  uploadedAt  DateTime @default(now())

  // Relaciones
  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@map("work_order_photos")
}

// Modelo de Pasos de Órdenes de Trabajo
model WorkOrderStep {
  id          Int       @id @default(autoincrement())
  workOrderId Int
  stepNumber  Int
  title       String
  description String?
  status      StepStatus @default(PENDING)
  completedBy Int?
  completedAt DateTime?

  // Relaciones
  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@map("work_order_steps")
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

// Modelo de Transformadores
model Transformer {
  id               Int      @id @default(autoincrement())
  serialNumber     String   @unique
  model            String?
  manufacturer     String?
  voltage          String?  // "138/13.8 kV"
  power            String?  // "100 MVA"
  installDate      DateTime?
  location         String?
  coordinates      String?  // "lat,lng"
  status           TransformerStatus @default(OPERATIONAL)
  lastMaintenance  DateTime?
  nextMaintenance  DateTime?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relaciones
  workOrders WorkOrderTransformer[]
  procedures TransformerProcedure[]

  @@map("transformers")
}

enum TransformerStatus {
  OPERATIONAL
  MAINTENANCE
  OUT_OF_SERVICE
  DECOMMISSIONED
}

// Modelo de Catálogo de Procedimientos
model ProcedureCatalog {
  id              Int      @id @default(autoincrement())
  title           String
  category        String
  description     String?
  instructions    String   // JSON o texto largo
  safetyNotes     String?
  estimatedTime   Int?     // minutos
  requiredTools   String?  // JSON array
  requiredPersonnel Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  procedures TransformerProcedure[]

  @@map("procedure_catalog")
}

// Modelo de Relación Órdenes-Transformadores
model WorkOrderTransformer {
  id            Int @id @default(autoincrement())
  workOrderId   Int
  transformerId Int

  // Relaciones
  workOrder   WorkOrder   @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  transformer Transformer @relation(fields: [transformerId], references: [id], onDelete: Cascade)

  @@unique([workOrderId, transformerId])
  @@map("work_order_transformers")
}

// Modelo de Procedimientos de Transformadores
model TransformerProcedure {
  id            Int      @id @default(autoincrement())
  workOrderId   Int
  transformerId Int
  procedureId   Int
  personnelId   Int
  status        ProcedureStatus @default(PENDING)
  startedAt     DateTime?
  completedAt   DateTime?
  notes         String?
  createdAt     DateTime @default(now())

  // Relaciones
  workOrder   WorkOrder        @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  transformer Transformer      @relation(fields: [transformerId], references: [id], onDelete: Cascade)
  procedure   ProcedureCatalog @relation(fields: [procedureId], references: [id])
  personnel   Personnel        @relation(fields: [personnelId], references: [id])
  photos      TransformerProcedurePhoto[]

  @@map("transformer_procedures")
}

enum ProcedureStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  SKIPPED
}

// Modelo de Fotos de Procedimientos
model TransformerProcedurePhoto {
  id          Int      @id @default(autoincrement())
  procedureId Int
  fileName    String
  filePath    String
  fileSize    Int?
  description String?
  uploadedAt  DateTime @default(now())

  // Relaciones
  procedure TransformerProcedure @relation(fields: [procedureId], references: [id], onDelete: Cascade)

  @@map("transformer_procedure_photos")
}

// Modelo de Rutas
model Route {
  id            Int      @id @default(autoincrement())
  routeName     String
  crewId        Int
  startLocation String
  endLocation   String
  waypoints     String?  // JSON array de coordenadas
  distance      Float?   // kilómetros
  estimatedTime Int?     // minutos
  actualTime    Int?     // minutos
  date          DateTime
  status        RouteStatus @default(PLANNED)
  notes         String?
  createdAt     DateTime @default(now())

  // Relaciones
  crew Crew @relation(fields: [crewId], references: [id], onDelete: Cascade)

  @@map("routes")
}

enum RouteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Modelo de Entrenamientos
model Training {
  id             Int      @id @default(autoincrement())
  personnelId    Int
  trainingType   String
  title          String
  description    String?
  provider       String?
  completionDate DateTime?
  expirationDate DateTime?
  certificateNumber String?
  status         TrainingStatus @default(PENDING)
  notes          String?
  createdAt      DateTime @default(now())

  // Relaciones
  personnel Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  @@map("training")
}

enum TrainingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  EXPIRED
  CANCELLED
}

// Modelo de Equipos de Seguridad
model SafetyEquipment {
  id             Int      @id @default(autoincrement())
  personnelId    Int
  equipmentType  String
  serialNumber   String?
  manufacturer   String?
  model          String?
  purchaseDate   DateTime?
  expirationDate DateTime?
  lastInspection DateTime?
  nextInspection DateTime?
  status         EquipmentStatus @default(ACTIVE)
  location       String?
  notes          String?
  createdAt      DateTime @default(now())

  // Relaciones
  personnel Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  @@map("safety_equipment")
}

enum EquipmentStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  EXPIRED
  RETIRED
}

// Modelo de Alertas
model Alert {
  id        Int         @id @default(autoincrement())
  type      AlertType
  title     String
  message   String
  severity  AlertSeverity @default(MEDIUM)
  status    AlertStatus @default(ACTIVE)
  entityType String?    // "personnel", "transformer", etc.
  entityId  Int?
  createdAt DateTime   @default(now())
  resolvedAt DateTime?
  resolvedBy String?

  @@map("alerts")
}

enum AlertType {
  MAINTENANCE
  SAFETY
  DOCUMENT_EXPIRY
  TRAINING_DUE
  EQUIPMENT_CALIBRATION
  PROJECT_DELAY
  EMERGENCY
  SYSTEM
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  DISMISSED
}